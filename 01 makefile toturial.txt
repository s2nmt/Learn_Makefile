Why do Makefile exist?
Makefile are used to help decide which parts of a large program need to be recomplied. In the vast majority of cases, C or C++ file are compiled. Other languages typically have their own tools that serve a similar purpose as Make. Make can also be used beyond(vượt ra) compilation too, when you need a series of instructions to run depending on what files have changed. This tutorial will forcus on the C/C++ compilation use case.

Here's an example dependency graph that you might build with Make. If any file's dependencies changes, then the file will get recompiled:

What alternatives are there to Make?
Popular C/C++ a alternative build systems are Scons, CMake, Bazel and Ninja. Some code editors like Microsoft Visual Studio have their own built in build tools. For Java, there's Ant, Maven and Gradle. Other languages like Go, Rust and TypeScipt have their own build tools.
Interpreted (Thông dịch) languages like Python, Ruby, and raw Javascript don't require an analogue to Makefile. The goal of Makefiles is to compile whatever files need to compiled, based on what files have changed. But when files in interpreted languages change, nothing needs to get recompiled. When the program runs, the most recent version of the line is used.

The versions and types of Make
There are a variety of implementations of Make, but most of this guide will work on whatever version you're using. However, it's specifically written for GNU Make, which is the standard implementation on Linux and MacOS. ALL the examples works for Make versions 3 and 4, which are nearly equivalent(tương đương) other than some esoteric(bí truyền) diffences.
Running the Examples
To run these examples, you'll need a terminal and "make" installed. For each example, put the contents in a file called Makefile,  and in that directory run the command make. Let's start with the simplest of Makefiles:

hello: 
	echo "hello, World"

	Note: Makefiles must be indented (thụt vào) using TABs and not spaces or make will fail.
Here is the output of running the above example:
$make
echo "hello, World"
Hello, World

That's it! if you're a bit confused, here's a video that goes through these steps, along with describing the basic structure of Makefiles.

Makefile Syntax
A Makefile consists of a set of rules, A rule generally looks like this:
targets: prerequisites
	command
	command
	command
the targets are file names, separated by spaces. Typically, there is only one per rule.
the commands are a series of steps typically used to make the target(s). These need to start with a tab character, not spaces.
the prerequisites are also file names, separated by spaces. These files need to exist before the commands for the target are run. These are also called dependencies.

The essence of Make
Let's start with a hello world example:
	We have one target called hello
	This target has two commands
	This target has no prerequisites